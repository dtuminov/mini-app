# Aiogram imports
from aiogram import Dispatcher, types, filters, Bot, F
from aiogram.enums import ParseMode
from aiogram.filters import StateFilter
from aiogram.types import ContentType
from aiogram.fsm.context import FSMContext

# Keyboards
from keyboards.admin_kbs import get_mailer_menu_kb, get_mailer_back_kb, get_mailer_back_with_skip_kb, get_mailer_finish_kb, get_mailer_btn_ikb, get_main_menu_kb

# DB
from database.orm import ORM as orm

# States
from states.main_states import AdminStates


# loader
def load_admin_mailer_handler(dispatcher: Dispatcher,bot: Bot):

	# init
	global g_bot
	g_bot = bot

	# Register handlers
	dispatcher.message.register(
		process_mailer_menu,
		F.text.in_(["‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞", "üîö –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]),
		StateFilter(
			AdminStates.main_menu,
			AdminStates.mailer_text_enter_text,
			AdminStates.mailer_text_enter_link,
			AdminStates.mailer_text_enter_finish,
			AdminStates.mailer_image_enter_image,
			AdminStates.mailer_image_enter_caption,
			AdminStates.mailer_image_enter_link,
			AdminStates.mailer_image_enter_finish
		)
	)

	## –¢–µ–∫—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
	dispatcher.message.register(
		process_mailer_text_1,
		F.text == "üìù –¢–µ–∫—Å—Ç",
		StateFilter(AdminStates.mailer_menu)
	)

	dispatcher.message.register(
		process_mailer_text_2,
		F.content_type == ContentType.TEXT,
		StateFilter(AdminStates.mailer_text_enter_text)
	)

	dispatcher.message.register(
		process_mailer_text_3,
		F.content_type == ContentType.TEXT,
		StateFilter(AdminStates.mailer_text_enter_link)
	)

	dispatcher.message.register(
		process_mailer_text_finish,
		F.text == "üü¢ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
		StateFilter(AdminStates.mailer_text_enter_finish)
	)

	## –†–∞—Å—Å—ã–ª–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
	dispatcher.message.register(
		process_mailer_image_1,
		F.text == "üñº –§–æ—Ç–æ",
		StateFilter(AdminStates.mailer_menu)
	)

	dispatcher.message.register(
		process_mailer_image_2,
		F.content_type == ContentType.PHOTO,
		StateFilter(AdminStates.mailer_image_enter_image)
	)

	dispatcher.message.register(
		process_mailer_image_3,
		F.content_type == ContentType.TEXT,
		StateFilter(AdminStates.mailer_image_enter_caption)
	)

	dispatcher.message.register(
		process_mailer_image_4,
		F.content_type == ContentType.TEXT,
		StateFilter(AdminStates.mailer_image_enter_link)
	)

	dispatcher.message.register(
		process_mailer_image_finish,
		F.text == "üü¢ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
		StateFilter(AdminStates.mailer_image_enter_finish)
	)


async def process_mailer_menu(message: types.Message, state: FSMContext):
	
	msg_text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:"

	await message.answer(
		text = msg_text,
		reply_markup = get_mailer_menu_kb()
	)

	await AdminStates.mailer_menu.set()


async def process_mailer_text_1(message: types.Message, state: FSMContext):

	msg_text = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:"

	await message.answer(
		text = msg_text,
		reply_markup = get_mailer_back_kb()
	)

	await AdminStates.mailer_text_enter_text.set()


async def process_mailer_text_2(message: types.Message, state: FSMContext):

	async with state.proxy() as storage:
		storage["admin_mailer_text"] = message.html_text
		print(message.html_text)

	msg_text = "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏:"

	await message.answer(
		text = msg_text,
		reply_markup = get_mailer_back_with_skip_kb()
	)

	await AdminStates.mailer_text_enter_link.set()


async def process_mailer_text_3(message: types.Message, state: FSMContext):

	async with state.proxy() as storage:
		storage["admin_mailer_link"] = message.text if message.text != "‚Ü™Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else None
		text = storage.get("admin_mailer_text")

	await message.answer(
		text = "üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:",
		reply_markup = get_mailer_finish_kb()
	)

	try:
		await message.answer(
			text = text,
			reply_markup = get_mailer_btn_ikb(link = message.text) if message.text != "‚Ü™Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else None,
			parse_mode = ParseMode.HTML
		)
	except:
		await message.answer(
			text = "üî¥ –û—à–∏–±–∫–∞!",
			reply_markup = get_mailer_menu_kb()
		)

		await AdminStates.mailer_menu.set()
		return


	await AdminStates.mailer_text_enter_finish.set()


async def process_mailer_text_finish(message: types.Message, state: FSMContext):

	# unpack
	async with state.proxy() as storage:
		text = storage.get("admin_mailer_text")
		link = storage.get("admin_mailer_link")

	all_users = await orm.get_all_users()

	counter = 0

	await message.answer(
		text = "‚ñ∂Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...",
		reply_markup = get_main_menu_kb()
	)

	await AdminStates.main_menu.set()

	for user in all_users:
		try:
			await g_bot.send_message(
				chat_id = user.user_id,
				text = text,
				parse_mode = ParseMode.HTML,
				reply_markup = get_mailer_btn_ikb(link) if link is not None else None
			)

			counter += 1
		except Exception as e:
			print(e)

	await message.answer(
		text = f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {counter}/{len(all_users)}."
	)





















async def process_mailer_image_1(message: types.Message, state: FSMContext):

	msg_text = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É:"

	await message.answer(
		text = msg_text,
		reply_markup = get_mailer_back_kb()
	)

	await AdminStates.mailer_image_enter_image.set()


async def process_mailer_image_2(message: types.Message, state: FSMContext):

	async with state.proxy() as storage:
		storage["admin_mailer_image"] = message.photo[-1].file_id

	msg_text = "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ:"

	await message.answer(
		text = msg_text,
		reply_markup = get_mailer_back_with_skip_kb()
	)

	await AdminStates.mailer_image_enter_caption.set()


async def process_mailer_image_3(message: types.Message, state: FSMContext):

	# validation
	if len(message.text) > 1024:
		await message.answer("üî¥ –î–æ–ø—É—Å—Ç–∏–º—ã–π –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ - 1024. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É:")
		return

	async with state.proxy() as storage:
		storage["admin_mailer_caption"] = message.html_text if message.text != "‚Ü™Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else None


	msg_text = "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏:"

	await message.answer(
		text = msg_text,
		reply_markup = get_mailer_back_with_skip_kb()
	)

	await AdminStates.mailer_image_enter_link.set()


async def process_mailer_image_4(message: types.Message, state: FSMContext):

	async with state.proxy() as storage:
		storage["admin_mailer_link"] = message.text if message.text != "‚Ü™Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else None
		caption = storage.get("admin_mailer_caption")
		photo = storage.get("admin_mailer_image")

	await message.answer(
		text = "üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:",
		reply_markup = get_mailer_finish_kb()
	)

	try:
		await message.answer_photo(
			photo = photo,
			caption = caption,
			reply_markup = get_mailer_btn_ikb(link = message.text) if message.text != "‚Ü™Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else None,
			parse_mode = ParseMode.HTML
		)
	except Exception as e:
		print(e)
		await message.answer(
			text = "üî¥ –û—à–∏–±–∫–∞!",
			reply_markup = get_mailer_menu_kb()
		)

		await AdminStates.mailer_menu.set()
		return


	await AdminStates.mailer_image_enter_finish.set()


async def process_mailer_image_finish(message: types.Message, state: FSMContext):

	# unpack
	async with state.proxy() as storage:
		caption = storage.get("admin_mailer_caption")
		photo = storage.get("admin_mailer_image")
		link = storage.get("admin_mailer_link")

	all_users = await orm.get_all_users()

	counter = 0

	await message.answer(
		text = "‚ñ∂Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞...",
		reply_markup = get_main_menu_kb()
	)

	await AdminStates.main_menu.set()

	for user in all_users:
		try:
			await g_bot.send_photo(
				chat_id = user.user_id,
				photo = photo,
				caption = caption,
				reply_markup = get_mailer_btn_ikb(link = link) if link is not None else None,
				parse_mode = ParseMode.HTML
			)

			counter += 1
		except:
			pass

	await message.answer(
		text = f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {counter}/{len(all_users)}."
	)